// esbuild.config.mjs

import esbuild from "esbuild";
import process from "process";
import fs from "fs/promises";
import 'dotenv/config';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// .env 파일에서 Vault 경로를 읽어옵니다.
const vaultPluginPath = process.env.OBSIDIAN_PLUGIN_PATH;

if (!vaultPluginPath) {
  console.error("Error: OBSIDIAN_PLUGIN_PATH environment variable is not set. Please create a .env file.");
  process.exit(1);
}

const prod = (process.argv[2] === "production");

// 1. 빌드가 끝난 후 파일을 복사하는 플러그인을 정의합니다.
const copyPlugin = {
  name: 'copy-to-obsidian',
  setup(build) {
    build.onEnd(async (result) => {
      if (result.errors.length === 0) {
        console.log("Build succeeded, copying files...");
        await fs.copyFile("main.js", `${vaultPluginPath}/main.js`);
        await fs.copyFile("manifest.json", `${vaultPluginPath}/manifest.json`);
        // styles.css는 존재할 경우에만 복사합니다.
        try {
          await fs.copyFile("styles.css", `${vaultPluginPath}/styles.css`);
        } catch (e) {
          // styles.css가 없어도 에러는 아님
        }
        console.log("✅ Plugin files copied to vault.");
      }
    });
  },
};


// 2. esbuild.build 대신 esbuild.context를 사용합니다.
try {
  const context = await esbuild.context({
    banner: { js: banner },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: ["obsidian"],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    plugins: [copyPlugin], // 3. 정의한 플러그인을 여기에 추가합니다.
  });

  if (prod) {
    await context.rebuild();
    console.log("Production build complete.");
    await context.dispose();
  } else {
    // 4. context.watch()를 호출하여 파일 변경 감지를 시작합니다.
    await context.watch();
    console.log("👀 Watching for changes...");
  }
} catch (e) {
  console.error(e);
  process.exit(1);
}